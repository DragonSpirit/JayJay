// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#F5FCFF",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <Text
    style={
      Object {
        "fontSize": 20,
        "margin": 10,
        "textAlign": "center",
      }
    }
  >
    Похоже на то, что вы никого не выбрали для отслеживания
  </Text>
  <View
    style={
      Object {
        "borderRadius": 3,
      }
    }
  >
    <View
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "rgba(92, 99,216, 1)",
            "borderColor": "transparent",
            "borderRadius": 5,
            "borderWidth": 0,
            "flexDirection": "row",
            "height": 45,
            "justifyContent": "center",
            "padding": 8,
            "width": 300,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "white",
              "fontSize": 18,
              "paddingBottom": 1,
              "paddingTop": 2,
              "textAlign": "center",
            }
          }
        >
          Выбрать пользователя
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`renders correctly with empty feed but exists authors 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#F5FCFF",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <Text
    style={
      Object {
        "fontSize": 20,
        "margin": 10,
        "textAlign": "center",
      }
    }
  >
    Возможно возникли проблемы с загрузкой ленты
  </Text>
  <View
    style={
      Object {
        "borderRadius": 3,
      }
    }
  >
    <View
      accessible={true}
      isTVSelectable={true}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "rgba(92, 99,216, 1)",
            "borderColor": "transparent",
            "borderRadius": 5,
            "borderWidth": 0,
            "flexDirection": "row",
            "height": 45,
            "justifyContent": "center",
            "padding": 8,
            "width": 300,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "white",
              "fontSize": 18,
              "paddingBottom": 1,
              "paddingTop": 2,
              "textAlign": "center",
            }
          }
        >
          Обновить
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`renders correctly with non empty feed and authors 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#F5FCFF",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <RCTScrollView
      data={
        Array [
          Object {
            "author": "test",
            "did": 1,
            "id": 1,
            "isFavorite": false,
            "tags": "tag",
            "text": "Test",
            "title": "Test",
            "ts": 1,
            "url": "local.url",
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      refreshControl={
        <RefreshControlMock
          onRefresh={[Function]}
        />
      }
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={64}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <RCTRefreshControl />
      <View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            accessible={true}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "backgroundColor": "white",
                "borderColor": "#e1e8ee",
                "borderWidth": 1,
                "margin": 15,
                "marginBottom": 0,
                "padding": 15,
                "shadowColor": "rgba(0,0,0, .2)",
                "shadowOffset": Object {
                  "height": 0,
                  "width": 0,
                },
                "shadowOpacity": 1,
                "shadowRadius": 1,
              }
            }
          >
            <View
              style={
                Object {
                  "backgroundColor": "transparent",
                }
              }
            >
              <View>
                <Text
                  style={
                    Object {
                      "color": "#43484d",
                      "fontSize": 17.5,
                      "fontWeight": "bold",
                      "marginBottom": 15,
                      "textAlign": "center",
                    }
                  }
                  testID="cardTitle"
                  theme={
                    Object {
                      "colors": Object {
                        "disabled": "hsl(208, 8%, 90%)",
                        "divider": "#bcbbc1",
                        "error": "#ff190c",
                        "grey0": "#393e42",
                        "grey1": "#43484d",
                        "grey2": "#5e6977",
                        "grey3": "#86939e",
                        "grey4": "#bdc6cf",
                        "grey5": "#e1e8ee",
                        "greyOutline": "#bbb",
                        "platform": Object {
                          "android": Object {
                            "error": "#f44336",
                            "primary": "#2196f3",
                            "secondary": "#9C27B0",
                            "success": "#4caf50",
                            "warning": "#ffeb3b",
                          },
                          "ios": Object {
                            "error": "#ff3b30",
                            "primary": "#007aff",
                            "secondary": "#5856d6",
                            "success": "#4cd964",
                            "warning": "#ffcc00",
                          },
                        },
                        "primary": "#2089dc",
                        "searchBg": "#303337",
                        "secondary": "#8F0CE8",
                        "success": "#52c41a",
                        "warning": "#faad14",
                      },
                    }
                  }
                >
                  test 
 Test
                </Text>
                <View
                  style={
                    Object {
                      "backgroundColor": "#bcbbc1",
                      "height": 0.5,
                      "marginBottom": 15,
                    }
                  }
                />
              </View>
              <View
                style={Object {}}
              >
                <Text
                  allowFontScaling={true}
                  selectable={false}
                  style={
                    Array [
                      Object {},
                      Object {},
                    ]
                  }
                >
                  <Text
                    allowFontScaling={true}
                    style={
                      Object {
                        "fontSize": 14,
                      }
                    }
                  >
                    Test...
                  </Text>
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
</View>
`;
